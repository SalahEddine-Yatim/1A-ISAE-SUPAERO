#lang racket

(define (fact x)
  (if (zero? x)
      1
      (* x(fact (- x 1)))))

;On va faire une fonction pour transformer les si pour executer 
;(define (si (zero? x) alors 1 sinon (* (fact ))))

;utiliser fonction map pour apliquer une fonction sur tous la list 

(define (transform-les-si code)
  (if (list? code)
      (si-vers-if code)
      code))

(define (si-vers-if lst)
  (if (equal? (first lst) 'si)
      (list 'if
            (transform-les-si (second lst))
            (transform-les-si (fourth lst))
            (transform-les-si (sixth lst)))
      (map transform-les-si lst)))


(define (last l)
  (if (empty? (rest l))
      (first l)
      (last (rest l))))

(define (append l1 l2)
  null)










          