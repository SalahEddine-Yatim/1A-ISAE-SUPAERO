#ifndef QUEUE_MAP_H
#define QUEUE_MAP_H

#include "linked_list_map.h"
#include <stdbool.h>
// /**
//  * @brief An alias for the structure representing the cells
//  */
// typedef struct cell_map cell_map;

// /**
//  * @brief The structure representing the cells of the list
//  */
// struct cell_map {
//     /** the map stored in the cell */
//     char* p_map ;
//     /** the next map in the list */
//     cell_map* p_next_map ;
// };

/**
 * @brief An alias for the structure representing the
 *        p_queue
 */
typedef struct queue_map queue_map;

/**
 * @brief The structure representing the cells of the list
 */
struct queue_map {
    /** the head cell */
    cell_map* p_head ;
    /** the tail cell */
    cell_map* p_tail ;
    
};


/**
 * @brief Creates an empty p_queue
 *
 * @param p_queue  a p_queue be set to nil
 *
 * @post After the call, p_list points to a NULL cell.
 */
void nil_queue(queue_map* p_queue);


/**
 * @brief Get an element in the head of the p_queue
 * @param p_queue  a p_queue 
 * 
 * @return the value of the head
 */
cell_map* dequeue(queue_map* p_queue);

/**
 * @brief adding an element at the tail of the p_queue
 * @param p_queue  a p_queue
 * 
 * @return tnothing
 */
void enqueue(queue_map* p_queue , char* p_map);

/**
 * @brief adding a cell at the tail of the p_queue a function used in solver 
 * @param p_queue  a p_queue
 * 
 * @return nothing
 */
void enqueue_cell(queue_map* p_queue , cell_map* p_map_cell);

/**
 * @brief Deallocate a p_queue
 *
 * @param p_queue  a p_queue
 *
 * @post After the call to `deallocate_map`, all cells composing `list`
 *       are deallocated AND the pointer representing the list is also
 *       deallocated. `p_map_list` is `NULL` after the call.
 */
void deallocate_queue(queue_map* p_queue);

#endif


