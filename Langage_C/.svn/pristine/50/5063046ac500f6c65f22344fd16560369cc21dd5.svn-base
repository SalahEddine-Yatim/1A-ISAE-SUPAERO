_GUI = $(if $(NOGUI),,-D GUI -Werror)
_DEBUG = $(if $(DEBUG),-D DEBUG,)
_OPT = $(if $(OPT),-O3 -flto,)
CC = gcc
CFLAGS = -g -std=c99 -Wall $(_OPT) $(_GUI) $(_DEBUG) -I./include
LDFLAGS = -lSDL2

.PHONY: clean doc check-syntax compile-all launch-tests

# rule to generate the doxygen documentation
doc:
	doxygen conf/doxygen.conf

# rule to remove all .o files and all executables
clean:
	- rm -f *.o
	- find . -maxdepth 1 -executable -type f \( ! -name "Makefile" \) -delete

# compile rules
%.o: ./src/%.c
	$(CC) $(CFLAGS) -o $@ -c $^

%.o: ./tests/%.c
	$(CC) $(CFLAGS) -o $@ -c $^


# you should put all the .o files corresponding to your .c files as prerequisites of
# this rule (see examples)
# \ allows to go on the next line
check-syntax: example-main.o read-file-formatted.o read-file-text.o \
	write-fact.o test-dummy.o disc.o snow.o \
	test-loader.o test-move.o test_replay.o test_linked_list_map.o test_queue_map \
	play.o replay.o \
	app-play_without_gui.o app-sokoban_for_testing.o \

# put all the rules to build your applications and tests here (see examples)
example-main: example-main.o
	$(CC) $(CFLAGS) -o example-main example-main.o

example-string: example-string.o
	$(CC) $(CFLAGS) -o example-string example-string.o

read-file-formatted: read-file-formatted.o
	$(CC) $(CFLAGS) -o read-file-formatted read-file-formatted.o

read-file-text: read-file-text.o
	$(CC) $(CFLAGS) -o read-file-text read-file-text.o

write-fact: write-fact.o
	$(CC) $(CFLAGS) -o write-fact write-fact.o

test-dummy: test-dummy.o
	$(CC) $(CFLAGS) -o test-dummy test-dummy.o

# the app-ex-loader app
app-ex-loader: app-ex-loader.o
	$(CC) $(CFLAGS) -o app-ex-loader app-ex-loader.o

# the app-ex-gui app. Beware, for graphical applications, you MUST add $(LDFLAGS)!
app-ex-gui: app-ex-gui.o gui.o include/gui.h
	$(CC) $(CFLAGS) -o app-ex-gui app-ex-gui.o gui.o $(LDFLAGS)

# put all your applications and tests executables as prerequisite of this rule
# \ allows to go to the next line
compile-all: example-main read-file-formatted read-file-text \
	write-fact test-dummy app-ex-loader app-ex-gui  \
	test-loader test-move test-replay test_linked_list_map test_queue_map \
	play replay \
	app-play_without_gui app-sokoban_for_testing \


# add all your test executables in the following variable. You should respect
# the order given in the project text
# \ allows to go to the next line
ALL_TESTS = test-loader test-move test-replay test_linked_list_map test_queue_map

launch-tests: $(ALL_TESTS)
	for x in $(ALL_TESTS); do ./$$x --all; done

# add all .c, .h and .txt files in repository
svn-add-all-files:
	svn add --force src/*.c include/*.h data/*.txt --auto-props --parents --depth infinity -q



#Test Files

test-loader : test-loader.o  loader.o  include/loader.h
	$(CC) $(CFLAGS) -o test-loader test-loader.o loader.o 

test-move : test-move.o move.o loader.o include/loader.h include/move.h 
	$(CC) $(CFLAGS) -o test-move test-move.o move.o loader.o 

test-replay : test-replay.o  loader.o  replay_function.o  include/loader.h  include/replay_function.h include/move.h 
	$(CC) $(CFLAGS) -o test-replay test-replay.o loader.o  replay_function.o move.o

test_linked_list_map : test_linked_list_map.o loader.o linked_list_map.o include/loader.h include/linked_list_map.h 
	$(CC) $(CFLAGS) -o test_linked_list_map test_linked_list_map.o loader.o  linked_list_map.o 

test_queue_map : test_queue_map.o loader.o queue_map.o include/loader.h include/queue_map.h
	$(CC) $(CFLAGS) -o test_queue_map test_queue_map.o loader.o queue_map.o

#Important Files 

replay : replay.o move.o loader.o sokoban.o include/sokoban.h include/loader.h include/move.h 
	$(CC) $(CFLAGS) -o replay replay.o move.o loader.o sokoban.o replay_function.o

play : play.o loader.o gui.o include/loader.h include/gui.h include/move.h 
	$(CC) $(CFLAGS) -o play play.o loader.o move.o gui.o $(LDFLAGS)



#Appfiles

app-sokoban_for_testing : app-sokoban_for_testing.o  move.o loader.o sokoban.o replay_function.o include/sokoban.h include/loader.h include/move.h include/replay_function.h
	$(CC) $(CFLAGS) -o app-sokoban_for_testing app-sokoban_for_testing.o move.o loader.o sokoban.o replay_function.o

app-play_without_gui : app-play_without_gui.o loader.o move.o sokoban.o include/sokoban.h include/loader.h include/move.h
	$(CC) $(CFLAGS) -o app-play_without_gui app-play_without_gui.o move.o loader.o sokoban.o


#Making a valgrind control to all test you can use it by make valgrind

valgrind : valgrind_replay valgrind_move valgrind_load valgrind_linked_list_map

valgrind_replay : test-replay 
	valgrind --leak-check=full ./test-replay 

valgrind_move :  test-move 
	valgrind --leak-check=full ./test-move 

valgrind_load : test-loader
	valgrind --leak-check=full ./test-loader

valgrind_linked_list_map : test_linked_list_map
	valgrind --leak-check=full ./test_linked_list_map

valgrind_queue_map  : test_queue_map 
	valgrind --leak-check=full ./test_queue_map 

#Done Valgring part